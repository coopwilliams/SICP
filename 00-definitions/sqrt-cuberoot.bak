#lang scheme
(define (square x)
  (* x x))
(define (average x y)
  (/ (+ x y) 2))
(define(goodenough? guess x)
  (< (abs(- (square guess) x)) 0.001))
(define(alsogoodenough? guess oldguess)
  (< (abs(- guess oldguess)) (* oldguess 0.001)))
(define (improve guess x)
  (average guess (/ x guess)))
(define (sqrt-iter guess x)
  (if (alsogoodenough? (improve guess x) guess)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (cube x)
  (* x x x))
(define (cubeimprove guess x )
  (/(+(/ x (square guess))(* 2 guess))3))
(define (closecube? guess oldguess)
  (< (abs (- guess oldguess)) 0.001))
(define (cube-iter guess x)
  (if (closecube? (cubeimprove guess x) guess)
      guess
      (cube-iter (cubeimprove guess x)
                 x)))
(define (cuberoot x)
  (cube-iter 1.0 x))
